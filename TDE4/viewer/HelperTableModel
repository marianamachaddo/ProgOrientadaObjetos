package viewer;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

public class HelperTableModel {
    private DefaultTableModel tableModel;
    private ArrayList<String> listaAtributos = new ArrayList<String>();
    private Object[][] tabela;

    public HelperTableModel(Object[] objetos) {
        if (objetos == null || objetos.length == 0) {
            this.tabela = new Object[0][0];
            this.tableModel = new DefaultTableModel(this.tabela, new Object[]{"Nenhum dado"});
            return;
        }

        Class<?> classe = objetos[0].getClass();
        for (Method m : classe.getMethods()) {
            String nomeMetodo = m.getName();
            // Evita métodos que retornam listas para não poluir a tabela
            if (nomeMetodo.startsWith("get") && !nomeMetodo.equals("getClass") && !m.getReturnType().equals(java.util.List.class) ) {
                listaAtributos.add(nomeMetodo.substring(3));
            }
        }

        int qtde = objetos.length;
        tabela = new Object[qtde][listaAtributos.size()];

        for (int i = 0; i < qtde; i++) {
            for (int j = 0; j < listaAtributos.size(); j++) {
                try {
                    Method get = classe.getMethod("get" + listaAtributos.get(j));
                    Object valor = get.invoke(objetos[i]);
                    tabela[i][j] = valor;
                } catch (NoSuchMethodException | SecurityException | IllegalAccessException |
                         IllegalArgumentException | InvocationTargetException e) {
                    e.printStackTrace();
                }
            }
        }
        this.tableModel = new DefaultTableModel(this.getTabela(), this.getAtributos());
    }

    public Object[] getAtributos() {
        return listaAtributos.toArray();
    }

    public Object[][] getTabela() {
        return this.tabela;
    }



    public DefaultTableModel getTableModel() {
        return this.tableModel;
    }
}
